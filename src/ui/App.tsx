
import React, { useEffect, useMemo, useState } from "react";
type Knowledge = any; type Step = any;
type Selections = { mode?: "Digital" | "Digital & Print"; eventType?: string; guests?: string; format?: "Postkarte" | "Streifen" | "Großbild"; accessories?: { requisiten?: boolean; hintergrund?: boolean; layout?: boolean }; printRecommendation?: string; };
type Message = { role: "assistant" | "user"; text: string };
const RAW = "https://raw.githubusercontent.com/Sascha-Fotobox/KI-Agent-Dennis/main/public/knowledge.json";
const App: React.FC = () => {
  const [K,setK]=useState<Knowledge|null>(null); const [err,setErr]=useState<string|null>(null);
  const [msgs,setMsgs]=useState<Message[]>([]); const [step,setStep]=useState(1); const [sub,setSub]=useState(0);
  const [sel,setSel]=useState<Selections>({ accessories:{requisiten:false,hintergrund:false,layout:false} });
  useEffect(()=>{(async()=>{const urls=[RAW,`${import.meta.env.BASE_URL}knowledge.json`,`/knowledge.json`,`knowledge.json`];let e:any=null;for(const u of urls){try{const r=await fetch(u,{cache:"no-store"});if(!r.ok)throw new Error(String(r.status));setK(JSON.parse(await r.text()));setErr(null);return;}catch(err0){e=err0;}}setErr(String(e));})()},[]);
  const addB=(t:string)=>setMsgs(m=>[...m,{role:"assistant",text:t}]); const addU=(t:string)=>setMsgs(m=>[...m,{role:"user",text:t}]);
  const stepById=(id:number):Step|undefined=>K?.button_flow?.steps?.find((s:any)=>s.id===id);
  const norm=(l?:string)=>!l?"":/geburt/i.test(l)?"Geburtstag":/hochzeit/i.test(l)?"Hochzeit":/abschluss/i.test(l)?"Abschlussball":/internes/i.test(l)?"Internes Mitarbeiterevent":/externes/i.test(l)?"Externes Kundenevent":/öffentlich|party/i.test(l)?"Öffentliche Veranstaltung":l;
  useEffect(()=>{if(!K)return; setMsgs([{role:"assistant",text:"Hi! Ich begleite dich Schritt für Schritt zur passenden Fotobox. Möchtest du die Fotobox 📱 Digital nutzen oder 🖨️ Digital & Print?"}]); setStep(1); setSub(0); setSel({accessories:{requisiten:false,hintergrund:false,layout:false}});},[K]);
  const onChoice=(c:string)=>{ addU(c);
    if(step===1){const m=c.includes("Digital & Print")?"Digital & Print":"Digital"; setSel(p=>({...p,mode:m})); if(m==="Digital"){addB("Top! Digital bedeutet unbegrenzt viele Fotos, QR-Downloads und eine DSGVO-konforme Online-Galerie – nachhaltig und flexibel.

Lass uns noch kurz dein Zubehör anschauen."); setStep(5); setSub(0); return;} addB("Alles klar – mit Sofortdruck. Was wird gefeiert?"); setStep(2); return; }
    if(step===2){ setSel(p=>({...p,eventType:c})); const s2:any=stepById(2); const rec=s2?.recommendations?.[c]||""; const bridge=s2?.after_reply?.text||"Klingt gut! Magst du mir sagen, wie viele Gäste ungefähr erwartet werden?"; addB([rec,bridge].filter(Boolean).join("\n\n")); setStep(3); return; }
    if(step===3){ setSel(p=>({...p,guests:c})); const s3:any=stepById(3); const ek=norm(sel.eventType); const spec=s3?.special_contexts?.[ek]?.[c]; const rec=spec||s3?.recommendations?.[c]||""; setSel(p=>({...p,printRecommendation:rec})); addB([rec,"Als Nächstes: Welches Druckformat wünscht ihr euch?"].join("\n\n")); setStep(4); return; }
    if(step===4){ const f:c any= c.startsWith("📸")?"Postkarte":c.startsWith("🎞️")?"Streifen":"Großbild"; setSel(p=>({...p,format:f})); const s4:any=stepById(4); const rec=s4?.recommendations?.[c]||""; const bridge=s4?.after_reply?.text||"Super, dann berücksichtige ich dieses Format für deine Preisübersicht am Ende. Lass uns jetzt noch kurz dein Zubehör anschauen."; addB([rec,bridge].filter(Boolean).join("\n\n")); setStep(5); setSub(0); return; }
    if(step===5){ const subs=(stepById(5) as any)?.substeps??[]; const s=subs[sub]; if(s){ const yes=c.startsWith("✅"); const key = s.key as keyof NonNullable<Selections["accessories"]>; setSel(p=>({...p,accessories:{...(p.accessories||{}),[key]:yes}})); const conf=yes?s.confirm_yes:s.confirm_no; if(conf) addB(conf); } const nxt=sub+1; if(nxt<subs.length){ setSub(nxt); const ns=subs[nxt]; if(ns?.say) addB(ns.say); } else { setStep(6); const summary=buildSummary(sel); const price=buildPriceText(sel,K); addB(["Kurze Zusammenfassung deiner Auswahl:",summary,"Transparente Preisübersicht:",price].join("\n\n")); } return; }
  };
  if(err) return <div className="app"><header className="header"><h1>FOBI Fotobox – Assistent</h1></header><main className="chat"><div className="msg assistant"><div className="bubble"><strong>Knowledge konnte nicht geladen werden.</strong>{"\n"}Details: {err}{"\n"}Bitte prüfe die RAW-URL auf GitHub.</div></div></main></div>;
  if(!K) return <div className="app"><header className="header"><h1>FOBI Fotobox – Assistent</h1></header><main className="chat"><div className="msg assistant"><div className="bubble">Knowledge wird geladen …</div></div></main></div>;
  const cur:any=stepById(step); const buttons:string[]=cur?.buttons??[];
  return (<div className="app"><header className="header"><h1>{K.brand} – Assistent „{K.assistant_name}“</h1><small>{K.privacy_notice}</small></header><main className="chat">{msgs.map((m,i)=>(<div key={i} className={`msg ${m.role}`}><div className="bubble">{m.text}</div></div>))}<div className="step">{cur?.title&&<h2>{cur.title}</h2>}{cur?.ask&&<p className="ask">{cur.ask}</p>}{step===4&&(<div className="info">{(stepById(4) as any)?.info&&<p>{(stepById(4) as any).info}</p>}<ul><li>{(stepById(4) as any)?.change_intervals?.Postkartenformat}</li><li>{(stepById(4) as any)?.change_intervals?.Fotostreifenformat}</li><li>{(stepById(4) as any)?.change_intervals?.Großbildformat}</li></ul></div>)}{buttons.length>0&&(<div className="buttons">{buttons.map(b=>(<button key={b} onClick={()=>onChoice(b)}>{b}</button>))}</div>)}{step===5&&renderAccessoryButtons(sub, stepById(5) as any, onChoice)}</div></main><footer className="footer"><small>Tonalität: {K.language_tone}</small></footer></div>);
};
function renderAccessoryButtons(sub:number, step5:any, onChoice:(c:string)=>void){const subs=step5?.substeps??[]; const s=subs[sub]; if(!s) return null; const btns:string[]=s.buttons??[]; return (<div className="buttons">{btns.map(b=>(<button key={b} onClick={()=>onChoice(b)}>{b}</button>))}</div>);}
function buildSummary(sel:Selections){const parts:string[]=[]; parts.push(`Modus: ${sel.mode==="Digital"?"Digital (Fobi Smart, digitale Nutzung inkl.)":"Digital & Print"}`); if(sel.eventType)parts.push(`Event: ${sel.eventType}`); if(sel.guests)parts.push(`Gäste: ${sel.guests}`); if(sel.format)parts.push(`Druckformat: ${sel.format==="Postkarte"?"Postkartenformat (10×15)":sel.format==="Streifen"?"Fotostreifen (5×15)":"Großbildformat (15×20)"}`); const acc=sel.accessories||{}; const accL:string[]=[]; if(acc.requisiten)accL.push("Requisiten"); if(acc.hintergrund)accL.push("Hintergrund"); if(acc.layout)accL.push("Individuelles Layout"); if(accL.length)parts.push(`Zubehör: ${accL.join(", ")}`); if(sel.printRecommendation)parts.push(`Empfehlung: ${sel.printRecommendation}`); parts.push("Hinweise: 400 Prints im Postkartenformat entsprechen automatisch 800 Fotostreifen; beim Großbildformat entspricht ein Printpaket 200 → 100 Großbild-Prints."); return "• "+parts.join("\n• ");}
function buildPriceText(sel:Selections,K:Knowledge){const p=K.pricing||{}; const items:Array<{label:string;price:number}>=[]; if(sel.mode==="Digital")items.push({label:"Digitalpaket (Fobi Smart)",price:p["Digitalpaket (Fobi Smart)"]||0}); if(sel.mode==="Digital & Print"){const it=recommendPrintPackageFromGuests(sel,K); if(it)items.push(it); const ek=normalizeEventKeyLocal(sel.eventType); if(ek==="Externes Kundenevent"){items.push({label:"Hinweis: Bei Messen/Promotions/Recruitingdays erfolgt die Abrechnung nach Verbrauch in 100er-Schritten. Media-Kit + Reserve-Kit werden gestellt.",price:0});}} const acc=sel.accessories||{}; const chosen=["requisiten","hintergrund","layout"].filter(k=>(acc as any)[k]); if(chosen.length>1){const extras=chosen.length-1; items.push({label:`Weitere Zubehörpakete (${extras}×)`,price:extras*(K.pricing?.["Jedes weitere Zubehörpaket"]||0)});} const sum=items.reduce((a,b)=>a+(b.price||0),0); const lines=items.map(i=>i.price>0?`• ${i.label}: ${i.price} €`:`• ${i.label}`); lines.push(`\n**Gesamtsumme: ${sum} €**`); return lines.join("\n");}
function recommendPrintPackageFromGuests(sel:Selections,K:Knowledge){const g=sel.guests; let label=""; if(g==="0–30 Personen")label="200 Prints (Postkartenformat)"; if(g==="30–50 Personen")label="200 Prints (Postkartenformat)"; if(g==="50–120 Personen")label="400 Prints (Postkartenformat)"; if(g==="120–250 Personen")label="800 Prints (Postkartenformat, 1 Drucksystem)"; if(g==="ab 250 Personen")label=""; if(!label)return null; const price=K?.pricing?.[label]; if(price==null)return null; return {label,price};}
function normalizeEventKeyLocal(l?:string){if(!l)return""; if(/geburt/i.test(l))return"Geburtstag"; if(/hochzeit/i.test(l))return"Hochzeit"; if(/abschluss/i.test(l))return"Abschlussball"; if(/internes/i.test(l))return"Internes Mitarbeiterevent"; if(/externes/i.test(l))return"Externes Kundenevent"; if(/öffentlich|party/i.test(l))return"Öffentliche Veranstaltung"; return l;}
export default App;
